"use strict";(self.webpackChunkappsync_butler_website=self.webpackChunkappsync_butler_website||[]).push([[2103],{6338:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"getting-started/write-resolvers","title":"Write resolvers","description":"We need to create two resolvers, one for the getDateTime query and another for the pong mutation","source":"@site/docs/getting-started/write-resolvers.md","sourceDirName":"getting-started","slug":"/getting-started/write-resolvers","permalink":"/appsync-butler/docs/getting-started/write-resolvers","draft":false,"unlisted":false,"editUrl":"https://github.com/alichry/appsync-butler/edit/master/website/docs/getting-started/write-resolvers.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"defaultSidebar","previous":{"title":"Define a GraphQL schema","permalink":"/appsync-butler/docs/getting-started/define-a-graphql-schema"},"next":{"title":"Instantialize AppSync","permalink":"/appsync-butler/docs/getting-started/instantialize-appsync"}}');var s=r(4848),o=r(8453);const i={sidebar_position:4},a="Write resolvers",l={},d=[{value:"Preparing the files",id:"preparing-the-files",level:2},{value:"Query.getDateTime",id:"querygetdatetime",level:3},{value:"Mutation.pong",id:"mutationpong",level:3}];function c(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"write-resolvers",children:"Write resolvers"})}),"\n",(0,s.jsxs)(t.p,{children:["We need to create two resolvers, one for the ",(0,s.jsx)(t.code,{children:"getDateTime"})," query and another for the ",(0,s.jsx)(t.code,{children:"pong"})," mutation"]}),"\n",(0,s.jsx)(t.h2,{id:"preparing-the-files",children:"Preparing the files"}),"\n",(0,s.jsx)(t.p,{children:"Both resolvers are simple unit resolvers. To setup a unit resolver, two files are required:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["A request mapping template, defaults to ",(0,s.jsx)(t.code,{children:"request.vtl"}),", and"]}),"\n",(0,s.jsxs)(t.li,{children:["A response mapping template, defaults to ",(0,s.jsx)(t.code,{children:"response.vtl"})]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"To proceed, create the appropriate directories and files."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-shell",children:"mkdir vtl/resolvers/Query/getDateTime vtl/resolvers/Mutation/pong\ntouch vtl/resolvers/Query/getDateTime/{request,response}.vtl vtl/resolvers/Mutation/pong/{request,response}.vtl\n"})}),"\n",(0,s.jsx)(t.p,{children:"This would resuslt in the following directory tree:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tree",children:"vtl\n\u251c\u2500\u2500 functions\n\u2514\u2500\u2500 resolvers\n    \u251c\u2500\u2500 Mutation\n    \u2502\xa0\xa0 \u2514\u2500\u2500 pong\n    \u2502\xa0\xa0     \u251c\u2500\u2500 request.vtl\n    \u2502\xa0\xa0     \u2514\u2500\u2500 response.vtl\n    \u2514\u2500\u2500 Query\n        \u2514\u2500\u2500 getDateTime\n            \u251c\u2500\u2500 request.vtl\n            \u2514\u2500\u2500 response.vtl\n"})}),"\n",(0,s.jsx)(t.h3,{id:"querygetdatetime",children:"Query.getDateTime"}),"\n",(0,s.jsxs)(t.p,{children:["To return the current date time, a data source (e.g. a DynamoDB table) is not necessary.\nTherefore, we can set this resolver's data source to ",(0,s.jsx)(t.a,{href:"https://docs.aws.amazon.com/appsync/latest/devguide/resolver-mapping-template-reference-none.html",children:"None"}),"."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",metastring:'title="vtl/resolvers/Query/getDateTime/request.vtl"',children:'##@butler.dataSource(\'none\')\n\n{\n    "version": "2018-05-29"\n}\n'})}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"none"})," data source key is a reserved key used internally by AppSync Butler to refer\nto a None data source."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-vtl",metastring:'title="vtl/resolvers/Query/getDateTime/response.vtl"',children:'$util.toJson($util.time.nowFormatted("yyyy-MM-dd HH:mm:ssZ"))\n'})}),"\n",(0,s.jsx)(t.h3,{id:"mutationpong",children:"Mutation.pong"}),"\n",(0,s.jsxs)(t.p,{children:["Similarly, this a ",(0,s.jsx)(t.a,{href:"https://docs.aws.amazon.com/appsync/latest/devguide/resolver-mapping-template-reference-none.html",children:"None"})," (local) data source resolver."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",metastring:'title="vtl/resolvers/Mutation/pong/request.vtl"',children:'##@butler.dataSource(\'none\')\n\n{\n    "version": "2018-05-29",\n    "payload": {\n        "word": "$ctx.args.word"\n    }\n}\n'})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-vtl",metastring:'title="vtl/resolvers/Mutation/pong/response.vtl"',children:'#set($word = $ctx.result.word)\n#set($reversed = "")\n#set($end = $word.length() - 1)\n\n#foreach ($i in [$end..0])\n    #set($reversed = "${reversed}$word.charAt($i)")\n#end\n\n$util.toJson($reversed)\n'})}),"\n",(0,s.jsx)(t.admonition,{type:"tip",children:(0,s.jsx)(t.p,{children:'The above resolver revereses the character sequence. When given the input word\nis "hello", it outputs "olleh". Based on this resolver, a fun exercise would be\nto check whether the input word is a palindrome or not.'})})]})}function p(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>i,x:()=>a});var n=r(6540);const s={},o=n.createContext(s);function i(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);